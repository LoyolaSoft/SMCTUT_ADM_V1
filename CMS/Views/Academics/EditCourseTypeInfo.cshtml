@model CMS.ViewModel.Model.CourseTypeModel
@using CMS.Utility;
    @{
        ViewBag.Title = "EditCourseTypeInfo";
        Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
    }
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="content" id="content">
            <ol class="breadcrumb pull-right">
                <li><a href="javascript:;">Home</a></li>
                <li><a href="@Url.Action("ListCoursetype","Academics")">List Course Type</a></li>
                <li class="active">Edit Course Type</li>
            </ol>
            <h2 class="page-header">Course Type Details</h2>
            <div class="panel">
                <div class="panel-heading bg-primary">
                    <div class="panel-heading-btn">
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
                    </div>
                    <h4 class="panel-title">Edit Course Type</h4>
                </div>
                <div class="panel-body">
                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.COURSE_TYPE, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.COURSE_TYPE, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Course type" } })
                                    @Html.ValidationMessageFor(model => model.COURSE_TYPE, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.PROGRAMME_LEVEL, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.PROGRAMME_LEVEL, Model.PROGRAMME_LEVEL, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.PROGRAMME_LEVEL, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.PART_ID, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.PART_ID, Model.PART_ID, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.PART_ID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.NO_OF_COMPONENTS, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.NO_OF_COMPONENTS, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter No Of components" } })
                                    @Html.ValidationMessageFor(model => model.NO_OF_COMPONENTS, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.COURSE_TYPE_ORDER, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.COURSE_TYPE_ORDER, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Course Type Order" } })
                                    @Html.ValidationMessageFor(model => model.COURSE_TYPE_ORDER, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CREDITS, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.CREDITS, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Credits" } })
                                    @Html.ValidationMessageFor(model => model.CREDITS, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.INTERNAL, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.INTERNAL, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Internal" } })
                                    @Html.ValidationMessageFor(model => model.INTERNAL, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EXTERNAL, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.EXTERNAL, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter External" } })
                                    @Html.ValidationMessageFor(model => model.EXTERNAL, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.TOTAL, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.TOTAL, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Total" } })
                                    @Html.ValidationMessageFor(model => model.TOTAL, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.HOURS, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.HOURS, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Hours" } })
                                    @Html.ValidationMessageFor(model => model.HOURS, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Is Student Based Selection", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.CheckBox("IS_STU_BASED_SELECTION", Model.IS_STU_BASED_SELECTION, new { @class = "input-sm" })

                                </div>
                            </div>

                            <div class="form-group pull-right">
                                <div class="col-md-12 pull-right">
                                    <a id="btnSubmit" value="Submit" class="btn btn-primary">Submit</a>
                                    <a id="btnCancel" value="Submit" class="btn btn-danger" href="@Url.Action("ListCoursetype","Academics")">Cancel</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @section scripts{
        <script>
            $(document).ready(function () {
                var ID=@Session[Common.SESSION_VARIABLES.COURSE_TYPE_ID];
                $.ajax({
                    url:"@Url.Action("FetchCourseTypeInfoById", "Academics")",
                    method:"POST",
                    datatype:"html",
                    data:{id:ID},
                    success:function(data){
                        $("#COURSE_TYPE").val(data.COURSE_TYPE);
                        $("#PROGRAMME_LEVEL").val(data.PROGRAMME_LEVEL);
                        $("#PART_ID").val(data.PART_ID);
                        $("#NO_OF_COMPONENTS").val(data.NO_OF_COMPONENTS);
                        $("#COURSE_TYPE_ORDER").val(data.COURSE_TYPE_ORDER);
                        $("#CREDITS").val(data.CREDITS);
                        $("#INTERNAL").val(data.INTERNAL);
                        $("#EXTERNAL").val(data.EXTERNAL);
                        $("#TOTAL").val(data.TOTAL);
                        $("#HOURS").val(data.HOURS);
                        if(data.IS_STU_BASED_SELECTION=="1"){
                            $('#IS_STU_BASED_SELECTION').prop('checked',true);
                        }
                        $("#IS_STU_BASED_SELECTION").val(data.IS_STU_BASED_SELECTION);
                    },error:function(error){
                        alert('No Data Found');
                    }
                });
            });
        </script>
<script>
        $('#btnSubmit').on("click", function () {
            var CourseType = $('#COURSE_TYPE').val();
            var ProgrammeLevel = $('#PROGRAMME_LEVEL').val();
            var Part = $('#PART_ID').val();
            var NoOfComponents = $('#NO_OF_COMPONENTS').val();
            var CourseTypeOrder = $('#COURSE_TYPE_ORDER').val();
            var Credits = $('#CREDITS').val();
            var Internal = $('#INTERNAL').val();
            var External = $('#EXTERNAL').val();
            var Total = $('#TOTAL').val();
            var Hours = $('#HOURS').val();
            var IsStuBasedSelection =$('#IS_STU_BASED_SELECTION').val();
            var JsonData;
            if ($('#IS_STU_BASED_SELECTION').is(":checked")) {
                IsStuBasedSelection = '1';
            }
            else {
                IsStuBasedSelection = 0;
            }
            alert(IsStuBasedSelection);
            JsonData = '{"COURSE_TYPE":"' + CourseType + '","PROGRAMME_LEVEL":"' + ProgrammeLevel + '","PART_ID":"' + Part + '","NO_OF_COMPONENTS":"' + NoOfComponents + '","COURSE_TYPE_ORDER":"' + CourseTypeOrder + '","CREDITS":"' + Credits + '","INTERNAL":"' + Internal + '","EXTERNAL":"' + External + '","TOTAL":"' + Total + '","HOURS":"' + Hours + '","IS_STU_BASED_SELECTION":"' + IsStuBasedSelection + '"}';
            alert(JsonData);
            $.ajax({
                url: "@Url.Action("UpdateCourseTypeInfo", "Academics")",
                method: "POST",
                datatype: "html",
                data: { JsonCourseType: JsonData },
                success: function (data) {
                    if (data != 'False') {
                        alert('Record saved successfully..!');
                    } else {
                        alert('Record not saved try again ..!');
                    }

                }, error: function (error) {
                    alert('Record not saved try again ..!');
                }
            });
        });
</script>
    }