@model CMS.ViewModel.Model.ProgrammeModel
@using CMS.Utility;
@{
    ViewBag.Title = "EditProgrammeInfo";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content" id="content">
        <ol class="breadcrumb pull-right">
            <li><a href="javascript:;">Home</a></li>
            <li><a href="@Url.Action("ListProgrammeInfo","Academics")">List Programme</a></li>
            <li class="active">Edit Programme</li>
        </ol>
        <h2 class="page-header">Programme Details</h2>
        <div class="panel">
            <div class="panel-heading bg-primary">
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
                </div>
                <h4 class="panel-title">Edit Programme</h4>
            </div>
            <div class="panel-body">

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PROGRAMME_NAME, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PROGRAMME_NAME, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Name" } })
                                @Html.ValidationMessageFor(model => model.PROGRAMME_NAME, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PROGRAMME_CODE, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PROGRAMME_CODE, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Code" } })
                                @Html.ValidationMessageFor(model => model.PROGRAMME_CODE, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PROGRAMME_DESCRIPTION, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PROGRAMME_DESCRIPTION, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Description" } })
                                @Html.ValidationMessageFor(model => model.PROGRAMME_DESCRIPTION, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DEPARTMENT, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.DEPARTMENT, Model.DEPARTMENT, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.DEPARTMENT, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DEGREE, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.DEGREE, Model.DEGREE, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.DEGREE, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PROGRAMME_ORDER, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PROGRAMME_ORDER, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Order" } })
                                @Html.ValidationMessageFor(model => model.PROGRAMME_ORDER, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DURATION_UNIT, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.DURATION_UNIT, Model.DURATION_UNIT, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.DURATION_UNIT, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NO_OF_SEMESTER, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.NO_OF_SEMESTER, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Number Of Semester" } })
                                @Html.ValidationMessageFor(model => model.NO_OF_SEMESTER, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CHANNEL, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.CHANNEL, Model.CHANNEL, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.CHANNEL, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.LabelFor(model => model.PRO_SERIES_ROLLNO, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PRO_SERIES_ROLLNO, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Series Roll Number" } })
                                @Html.ValidationMessageFor(model => model.PRO_SERIES_ROLLNO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SUBJECTS, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.SUBJECTS, Model.SUBJECTS, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.SUBJECTS, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PRO_SERIES_REGNO, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PRO_SERIES_REGNO, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Series Register Number" } })
                                @Html.ValidationMessageFor(model => model.PRO_SERIES_REGNO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PRO_SERIES_ADMNO, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.PRO_SERIES_ADMNO, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Programme Series Admission Number" } })
                                @Html.ValidationMessageFor(model => model.PRO_SERIES_ADMNO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MEDIUM_OF_INSTRACTION, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.MEDIUM_OF_INSTRACTION, Model.MEDIUM_OF_INSTRACTION, "-- Select --", new { @class = "drop-down form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.MEDIUM_OF_INSTRACTION, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Is Aided", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.CheckBox("IS_AIDED", Model.IS_AIDED, new { @class = "input-sm" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Non Aided", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.CheckBox("NON_AIDED", Model.NON_AIDED, new { @class = "input-sm" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Is Regular", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.CheckBox("IS_REGULAR", Model.IS_REGULAR, new { @class = "input-sm" })

                            </div>
                        </div>

                        <div class="form-group pull-right">
                            <div class="col-md-12 pull-right">
                                <a id="btnSubmit" value="Submit" class="btn btn-primary">Submit</a>
                                <a id="btnCancel" value="Submit" class="btn btn-danger" href="@Url.Action("ListProgrammeInfo","Academics")">Cancel</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script>
        $(document).ready(function () {
            var ID=@Session[Common.SESSION_VARIABLES.PROGRAMME_ID];
            $.ajax({
                url:"@Url.Action("FetchProgrammeInfoById", "Academics")",
                method:"POST",
                datatype:"html",
                data:{id:ID},
                success:function(data){
                    $("#PROGRAMME_NAME").val(data.PROGRAMME_NAME);
                    $("#PROGRAMME_CODE").val(data.PROGRAMME_CODE);
                    $("#PROGRAMME_DESCRIPTION").val(data.PROGRAMME_DESCRIPTION);
                    $("#DEPARTMENT").val(data.DEPARTMENT);
                    $("#DEGREE").val(data.DEGREE);
                    $("#PROGRAMME_ORDER").val(data.PROGRAMME_ORDER);
                    $("#DURATION_UNIT").val(data.DURATION_UNIT);
                    $("#NO_OF_SEMESTER").val(data.NO_OF_SEMESTER);
                    $("#CHANNEL").val(data.CHANNEL);
                    $("#PRO_SERIES_ROLLNO").val(data.PRO_SERIES_ROLLNO);
                    $("#SUBJECTS").val(data.SUBJECTS);
                    $("#PRO_SERIES_REGNO").val(data.PRO_SERIES_REGNO);
                    $("#PRO_SERIES_ADMNO").val(data.PRO_SERIES_ADMNO);
                    $("#MEDIUM_OF_INSTRACTION").val(data.MEDIUM_OF_INSTRACTION);
                    if(data.IS_AIDED=="1"){
                        $('#IS_AIDED').prop('checked',true);
                    }
                    $("#IS_AIDED").val(data.IS_AIDED);
                    if(data.IS_REGULAR=="1"){
                        $('#IS_REGULAR').prop('checked',true);
                    }
                    $("#IS_REGULAR").val(data.IS_REGULAR);
                    if(data.IS_AIDED=="1"){
                        $('#NON_AIDED').prop('checked',true);
                    }
                    $("#NON_AIDED").val(data.NON_AIDED);
                },error:function(error){
                    alert('No Data Found');
                }
            });
        });
    </script>
    <script>
        $('#btnSubmit').on("click", function () {
            var ProgrammeName = $('#PROGRAMME_NAME').val();
            var ProgrammeCode = $('#PROGRAMME_CODE').val();
            var ProgrammeDescription = $('#PROGRAMME_DESCRIPTION').val();
            var Department = $('#DEPARTMENT').val();
            var Degree = $('#DEGREE').val();
            var ProgrammeOrder = $('#PROGRAMME_ORDER').val();
            var DurationUnit = $('#DURATION_UNIT').val();
            var NoOfSemester = $('#NO_OF_SEMESTER').val();
            var Channel = $('#CHANNEL').val();
            var ProgrammeSeriesRollNo = $('#PRO_SERIES_ROLLNO').val();
            var Subjects = $('#SUBJECTS').val();
            var PorgrammeSeriesRegisterNo = $('#PRO_SERIES_REGNO').val();
            var ProgrammeSeriesAdmissionNo = $('#PRO_SERIES_ADMNO').val();
            var MediumOfInstruction = $('#MEDIUM_OF_INSTRACTION').val();
            var IsAided = $('#IS_AIDED').val();
            var NonAided = $('#NON_AIDED').val();
            var IsRegular = $('#IS_REGULAR').val();
            var JsonData;
            if ($('#IS_AIDED').is(":checked")) {
                IsAided = 1;
            }
            else {
                IsAided = 0;
            }
            if ($('#NON_AIDED').is(":checked")) {
                NonAided = 1;
            }
            else {
                NonAided = 0;
            }
            if ($('#IS_REGULAR').is(":checked")) {
                IsRegular = 1;
            }
            else {
                IsRegular = 0;
            }
            JsonData = '{"PROGRAMME_NAME":"' + ProgrammeName + '","PROGRAMME_CODE":"' + ProgrammeCode + '","PROGRAMME_DESCRIPTION":"' + ProgrammeDescription + '","DEPARTMENT":"' + Department + '","DEGREE":"' + Degree + '","PROGRAMME_ORDER":"' + ProgrammeOrder + '","DURATION_UNIT":"' + DurationUnit + '","NO_OF_SEMESTER":"' + NoOfSemester + '","CHANNEL":"' + Channel + '","PRO_SERIES_ROLLNO":"' + ProgrammeSeriesRollNo + '","SUBJECTS":"' + Subjects + '","PRO_SERIES_REGNO":"' + PorgrammeSeriesRegisterNo + '","PRO_SERIES_ADMNO":"' + ProgrammeSeriesAdmissionNo + '","MEDIUM_OF_INSTRACTION":"' + MediumOfInstruction + '","IS_AIDED":"' + IsAided + '","NON_AIDED":"' + NonAided + '","IS_REGULAR":"' + IsRegular + '"}';
            alert(JsonData);
            $.ajax({
                url: "@Url.Action("UpdateProgrammeInfo", "Academics")",
                method: "POST",
                datatype: "html",
                data: { JsonProgramme: JsonData },
                success: function (data) {

                    if (data != 'False') {
                        alert('Record Updated successfully..!');
                    } else {
                        alert('Record not Updated try again ..!');
                    }
                            
                }, error: function (error) {
                    alert('Record not Updated try again ..!');
                }
            });
        });
    </script>
}