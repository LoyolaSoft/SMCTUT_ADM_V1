@model CMS.ViewModel.Model.StaffRolesInfo



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h3>Staff Roles</h3>
    <hr />
        <div class="form-horizontal row">
            <div class="col-md-6">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.KNOWLEDGEINCOMPUTER, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.KNOWLEDGEINCOMPUTER, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "KnowledgeInComputer", id = "txtKnowledInComputer", @data_parsley_required = "true", @data_parsley_length = "[10,250]" } })
                        @Html.ValidationMessageFor(model => model.KNOWLEDGEINCOMPUTER, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MAINSUBJECT, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.MAINSUBJECT, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter SubjectName", id = "txtMainsubject", @data_parsley_type = "number" } })
                        @Html.ValidationMessageFor(model => model.MAINSUBJECT, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.QUALIFICATION, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.QUALIFICATION!=null)
	                    {
		                    @Html.DropDownListFor(model => model.QUALIFICATION, Model.QUALIFICATION, "-- Select --", new { @class = "form-control input-sm", id = "txtQualification", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.QUALIFICATION, "", new { @class = "text-danger" })
                        }
                        
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DESIGNATION, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.DESIGNATION!=null)
                        {
                            @Html.DropDownListFor(model => model.DESIGNATION, Model.DESIGNATION, "-- Select --", new { @class = "form-control input-sm", id = "txtDesignation", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.DESIGNATION, "", new { @class = "text-danger" })
                        }
                       
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SUBCATEGORY, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.SUBCATEGORY != null)
                        {
                            @Html.DropDownListFor(model => model.SUBCATEGORY, Model.SUBCATEGORY, "-- Select --", new { @class = "form-control input-sm", id = "txtSubCategory", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.SUBCATEGORY, "", new { @class = "text-danger" })
                        }

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                
                <div class="form-group">
                    @Html.LabelFor(model => model.NONTEACHINGCATEGORY, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.NONTEACHINGCATEGORY != null)
                        {
                            @Html.DropDownListFor(model => model.NONTEACHINGCATEGORY, Model.NONTEACHINGCATEGORY, "-- select --", new { @class = "form-control input-sm", id = "txtNonTeachingStaff", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.NONTEACHINGCATEGORY, "", new { @class = "text-danger" })
                        }

                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BOARDMEMBER, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.BOARDMEMBER != null)
                        {
                            @Html.DropDownListFor(model => model.BOARDMEMBER, Model.BOARDMEMBER, "-- select --", new { @class = "form-control input-sm", placeholder = "Enter BoardMember", id = "txtBoardMember", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.BOARDMEMBER, "", new { @class = "text-danger" })
                        }
                        
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SESSIONS, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        
                        @Html.EditorFor(model => model.SESSIONS, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Sessions", id = "txtSession" } })
                        @Html.ValidationMessageFor(model => model.SESSIONS, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SHIFT, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (Model.SHIFT != null)
                        {
                            @Html.DropDownListFor(model => model.SHIFT, Model.SHIFT, "-- Select --", new { @class = "form-control input-sm", id = "txtShift", @data_parsley_required = "true" })
                            @Html.ValidationMessageFor(model => model.SHIFT, "", new { @class = "text-danger" })
                        }
                        
                    </div>
                </div>

                <div class="form-group pull-right">
                    <div class="col-md-12 pull-right">
                        <a id="btnSubject" class="btn btn-primary">Update</a>
                    </div>
                </div>
            </div>
        </div>
        <script>
            $(document).ready(function () {
                var sOption = '<option value="">-- select -- </option>';
                $("#txtNonTeachingStaff").empty();
                $("#txtNonTeachingStaff").append(sOption);
            });
            // Subject Details ...
            $("#btnSubject").on("click", function ()
            {
                var isValid = true;
                if ($('#nav-tab2-10').parsley().validate() !== true) isValid = false;
                if (!isValid) {
                    //gritter-info,danger,success,warning,default
                    myAlert('Something went wrong ! Please check your inputs !', 'gritter-warning', '');
                    return false;
                }
                var KnowledInComputer = $("#txtKnowledInComputer").val();
                var MainSubject = $("#txtMainsubject").val();
                var Qualification = $("#txtQualification").val();
                var Designation = $("#txtDesignation").val();
                var NonTeachingStaff = $("#txtNonTeachingStaff").val();
                var SubCategory = $("#txtSubCategory").val();
                var BoardMember = $("#txtBoardMember").val();
                var Session = $("#txtSession").val();
                var Shift = $("#txtShift").val();
                var JsonData;
                if (JsonData == null)
                {
                    JsonData = '{"KNOWLEDGEINCOMPUTER":"' + KnowledInComputer + '","MAINSUBJECT":"' + MainSubject + '","QUALIFICATION":"' + Qualification + '","DESIGNATION":"' + Designation + '","NONTEACHINGCATEGORY":"' + NonTeachingStaff + '","SUBCATEGORY":"' + SubCategory + '","BOARDMEMBER":"' + BoardMember + '","SESSIONS":"' + Session + '","SHIFT":"' + Shift + '"}';
                }

                $.ajax({
                    url:"@Url.Action("UpdateSubjectDetails", "Staff")",
                    method: "POST",
                    datatype: "html",
                    data: { str: JsonData },
                    success: function (data)
                    {
                        alert(data);
                    }, error: function (error)
                    {
                        alert('Session time out try again ..!');
                    }
                });
            });
            $('#txtSubCategory').on('change', function ()
            {
                $.ajax({
                    url:"@Url.Action("FetchStaffCategory", "Staff")",
                    method: "POST",
                    datatype: "html",
                    data: { sCategory: $("#txtSubCategory").val() },
                    success: function (data) 
                    {
                        $("#txtNonTeachingStaff").empty();
                        $("#txtNonTeachingStaff").append('<option value="">-- select -- </option>' + data);
                    }, error: function (error)
                    {
                        alert('Internal Server Error ..!');
                    }
                });
            });
        </script>
}

