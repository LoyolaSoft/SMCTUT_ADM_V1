@model CMS.ViewModel.Model.TransferCertificate

@{
    ViewBag.Title = "TransferCertificate";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
}

@section styles{
<link href="~/Content/assets/plugins/select2/dist/css/select2.min.css" rel="stylesheet" />
<!-- ================== BEGIN PAGE LEVEL CSS STYLE ================== -->
<link href="~/Content/assets/plugins/gritter/css/jquery.gritter.css" rel="stylesheet" />
<link href="~/Content/assets/plugins/bootstrap-sweetalert/sweetalert.css" rel="stylesheet" />
<link href="~/Content/assets/plugins/parsley/src/parsley.css" rel="stylesheet" />
<!-- ================== END PAGE LEVEL CSS STYLE ================== -->
}
<div class="content" id="content">
    <!-- begin breadcrumb -->
    <ol class="breadcrumb pull-right">
        <li><a href="@Url.Action("STUDENT","DashBoard")">Home</a></li>
        <li class="active">Transfer Certificate</li>
    </ol>
    <!-- end breadcrumb -->
    <!-- begin page-header -->
    <h1 class="page-header">Transfer Certificate</h1>
    <!-- end page-header -->
    <!-- begin panel -->
    <div class="panel panel-primary" data-sortable-id="ui-general-1">
        <div class="panel-heading">
            <div class="panel-heading-btn">
                <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
            </div>
            <h4 class="panel-title">Transfer Certificate</h4>
        </div>
        <div class="panel-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ShiftList, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.ShiftList, Model.ShiftList, "-- select --", new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.ShiftList, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ProgramName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.ProgramName, Model.ProgramName, "-- select --", new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.ProgramName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ClassName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.ClassName, Model.ClassName, "-- select --", new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(model => model.ClassName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.StuName, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                <select class="form-control input-sm default-select2" id="StuName">
                                    <option value="0"> -- select --</option>
                                </select>
                            </div>
                            
                        </div>
                    </div>
                   <div>
                       <div class="row m-t-5">
                           <a class="btn btn-sm btn-success" href="@Url.Action("TCPrintView","Student")">Print View</a>
                       </div>
                   </div>
                    
                    <div class="form-group" id="tittle">
                            <h2 class="text-center">TRANSFER CERTIFICATE</h2>
                        </div>

                    <div class="col-md-10" id="TransferCertificate" data-parsley-validate="true">

                        <div class="form-group">
                            @Html.LabelFor(model => model.CollegeName, htmlAttributes: new { @class = "col-md-4 pull-left" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CollegeName, new { htmlAttributes = new { @class = "form-control input-sm", disabled = true, Placeholder="St. Mary's College" } })
                                @Html.ValidationMessageFor(model => model.CollegeName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DistrictName, htmlAttributes: new { @class = "col-md-4 pull-left" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.DistrictName, new { htmlAttributes = new { @class = "form-control input-sm", disabled = true, Placeholder="Truchirappalli" } })
                                @Html.ValidationMessageFor(model => model.DistrictName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "col-md-4 pull-left" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Student Name", style = "text-transform:uppercase", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ParentName, htmlAttributes: new { @class = "col-md-4  pull-left" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.ParentName, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Parents Name", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.ParentName, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Guardian, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Guardian Name", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.Guardian, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Nationality, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.Nationality,Model.Nationality,"-- Select --", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.Nationality, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.Religion,Model.Religion,"-- Select --", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.Religion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Caste, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Caste, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Enter Caste", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.Caste, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.Community,Model.Community,"-- Select -- ", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.Community, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Sex, htmlAttributes: new { @class = "col-md-4  pull-left" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.Sex,Model.Sex,"-- Select --", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-4">
                                <div class="input-group date" id="datetimepicker1">
                                    @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Format : dd/mm/yyy", @data_parsley_required = "true" } })
                                    @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                    <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.DateToWords, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Eg.Twenty-Eigth Octobar Two Thousand", @data_parsley_required = "true", @data_parsley_length = "[3,250]" } })
                                @Html.ValidationMessageFor(model => model.DateToWords, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IdentificationMark1, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.IdentificationMark1, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Identification Marks1", @data_parsley_required = "true", @data_parsley_length = "[3,250]" } })
                                @Html.ValidationMessageFor(model => model.IdentificationMark1, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.IdentificationMark2, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Identification Marks2", @data_parsley_length = "[3,250]" } })
                                @Html.ValidationMessageFor(model => model.IdentificationMark2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AdmissionDate, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-4">
                                <div class="input-group date" id="datetimepicker1">
                                    @Html.EditorFor(model => model.AdmissionDate, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Format : dd/mm/yyy", @data_parsley_required = "true" } })
                                    @Html.ValidationMessageFor(model => model.AdmissionDate, "", new { @class = "text-danger" })
                                    <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.AdmittedClass, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Admitted Class", @data_parsley_required = "true" } })
                                @Html.ValidationMessageFor(model => model.AdmittedClass, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LeavingTime, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.LeavingTime, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Leaving Time", @data_parsley_length = "[3,100]" } })
                                @Html.ValidationMessageFor(model => model.LeavingTime, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MainCourse, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.MainCourse, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Main Course", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.MainCourse, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AlliedCourse, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.AlliedCourse, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Allied Course", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.AlliedCourse, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FeesPaid, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.FeesPaid,Model.FeesPaid,"-- Select --", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.FeesPaid, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.StuScholarship, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.StuScholarship,Model.StuScholarship,"-- Select --", new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.StuScholarship, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LeavingDate, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                <div class="input-group date" id="datetimepicker1">
                                    @Html.EditorFor(model => model.LeavingDate, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Format : dd/mm/yyy", @data_parsley_required = "true" } })
                                    @Html.ValidationMessageFor(model => model.LeavingDate, "", new { @class = "text-danger" })
                                    <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                </div>
                             </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Conduct, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.Conduct,Model.Conduct,"-- Select --",new { @class = "form-control input-sm", @data_parsley_required = "true" })
                                @Html.ValidationMessageFor(model => model.Conduct, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.StuTCApplyDate, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                <div class="input-group date" id="datetimepicker1">
                                    @Html.EditorFor(model => model.StuTCApplyDate, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Format : dd/mm/yyy" } })
                                    @Html.ValidationMessageFor(model => model.StuTCApplyDate, "", new { @class = "text-danger" })
                                    <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                </div>
                             </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TCIssueDate, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                <div class="input-group date" id="datetimepicker1">
                                    @Html.EditorFor(model => model.TCIssueDate, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Format : dd/mm/yyy" } })
                                    @Html.ValidationMessageFor(model => model.TCIssueDate, "", new { @class = "text-danger" })
                                    <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                </div>
                             </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AcademicYears, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.AcademicYears, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Academic Year", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.AcademicYears, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ClassesStudied, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.ClassesStudied, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "Class Studied", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.ClassesStudied, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstLanguage, htmlAttributes: new { @class = "col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.FirstLanguage, new { htmlAttributes = new { @class = "form-control input-sm", Placeholder = "First Language", @data_parsley_required = "true", @data_parsley_length = "[3,45]" } })
                                @Html.ValidationMessageFor(model => model.FirstLanguage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hidden" id="dvCertificate"></div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <a href="#" class="btn-primary btn" id="btnTCIssue">Submit</a>
                            </div>
                        </div>
                    </div>

                </div>
            }
          
            
        </div>
    </div>
    <!-- end panel -->
</div>

@section scripts{
<script src="~/Content/assets/plugins/flot/jquery.flot.min.js"></script>
<script src="~/Content/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
<script src="~/Content/assets/plugins/select2/dist/js/select2.min.js"></script>
<!-- ================== BEGIN PAGE LEVEL SCRIPT ================== -->
<script src="~/Content/assets/plugins/gritter/js/jquery.gritter.js"></script>
<script src="~/Content/assets/plugins/bootstrap-sweetalert/sweetalert.min.js"></script>
<script src="~/Content/assets/js/ui-modal-notification.demo.min.js"></script>
<script src="~/Content/assets/plugins/parsley/dist/parsley.js"></script>
<!-- ================== BEGIN PAGE LEVEL SCRIPT ================== -->

<script>
        $(document).ready(function () {
            $("#TransferCertificate").hide(); 
            $("#tittle").hide();

            var sOption = '<option value="">-- Select --</option>';

            $("#ClassName").empty();
            $("#ClassName").append(sOption);
            $("#ProgramName").empty();
            $("#ProgramName").append(sOption);
            $("#StuName").empty();
            $("#StuName").append(sOption);
            //$("#btnTCIssueUpdate").hide();
            handleSelect2 = function ()
            {
                $(".default-select2").select2(), $(".multiple-select2").select2({
                    placeholder: "Select a Sudent"
                })
            }
            handleSelect2();

         handleDatepicker = function () {
             "use strict";
             $("#DateOfBirth,#AdmissionDate").datepicker({
                 todayHighlight: true,
                 autoclose: true,
                 endDate: new Date(),
                 format: "dd/mm/yyyy",
                 orientation: "right bottom"
             })
         }
         handleDatepicker();
         handlepicker = function () {
             "use strict";
             $("#LeavingDate,#TCIssueDate,#StuTCApplyDate").datepicker({
                 todayHighlight: true,
                 autoclose: true,
                 format: "dd/mm/yyyy",
                 orientation: "right bottom"
             })
         }
         handlepicker();
     });
        $("#DateOfBirth,#AdmissionDate,#LeavingDate,#TCIssueDate,#StuTCApplyDate").on("keypress", function (evt) {
            var keycode = evt.charCode || evt.keyCode;
            if (keycode == 46) {
                return false;
            }
        });
        
     $("#ProgramName").on("change", function ()
     {
         var ProgramName = $("#ProgramName").val();
         var ShiftId = $("#ShiftList").val();
         
         $.ajax({
             url:"@Url.Action("BindDDLClass", "Student")",
             method: "POST",
             datatype: "json",
             data: { sProgramId: ProgramName, sShiftId :ShiftId},
             success:function(data)
             {
                 $("#ClassName").empty();
                 $("#ClassName").append('<option value="">-- select --</option>'+data);
             },error:function(error)
             {
                 alert(error);
             }
         });
     });
    // Get Shift
    $("#ShiftList").on("change", function () {
        var sShift = $("#ShiftList").val();
        $.ajax({
            url: "@Url.Action("GetProgramByShift", "Student")",
            method: "POST",
            datatype: "json",
            data: { sShiftId: sShift },
            success: function (data) {
                $("#ProgramName").empty();
                $("#ProgramName").append('<option value="">-- Select --</option>' + data);
                $("#TransferCertificate").hide();
                $('#tittle').hide();
            }, error: function (error) {
                alert(error);
            }
        });
    });
        $("#ClassName").on("change", function ()
        {
            var ProgramName = $("#ProgramName").val();
            var ClassName = $("#ClassName").val();
            $.ajax({
                url:"@Url.Action("FetchStudents", "Student")",
                method: "POST",
                datatype: "json",
                data: { sClassId: ClassName, sProgramId: ProgramName},
                success:function(data)
                {
                    $("#StuName").empty();
                    $("#StuName").append('<option value="">-- select --</option>'+data);
                },error:function(error)
                {
                    alert(error);
                }
            });
        });

    // Fetch Students ..
    var FetchStudentForTC = function ()
    {
        var StuName = $("#StuName").val();
        
        $.ajax({
            url:"@Url.Action("FetchStudentForTC", "Student")",
            method: "POST",
            datatype: "json",
            data: { sStudentId: StuName },
            success:function(data)
            {
                if (data == "No Records Found ...!")
                {
                    alert(data);
                } else
                {
                    $('#tittle').show();
                    $("#TransferCertificate").show();
                    $("#tittle").show();
                    $("#StudentName").val(data.StudentName);
                    $("#ParentName").val(data.ParentName);
                    $("#SerialNo").val(data.SerialNo);
                    $("#AdmissionNo").val(data.AdmissionNo);
                    $("#Guardian").val(data.Guardian);
                    $("#Nationality").val(data.Nationality);
                    $("#Religion").val(data.Religion);
                    $("#Caste").val(data.Caste);
                    $("#Community").val(data.Community);
                    $("#Sex").val(data.Sex);
                    $("#DateOfBirth").val(data.DateOfBirth);
                    $("#IdentificationMark1").val(data.IdentificationMark1);
                    $("#IdentificationMark2").val(data.IdentificationMark2);
                    $("#AdmissionDate").val(data.AdmissionDate);
                    $("#AdmittedClass").val(data.AdmittedClass);
                    $("#LeavingTime").val(data.LeavingTime);
                    $("#MainCourse").val(data.MainCourse);
                    $("#AlliedCourse").val(data.AlliedCourse);
                    $("#FeesPaid").val(data.FeesPaid);
                    $("#StuScholarship").val(data.StuScholarship);
                    $("#LeavingDate").val(data.LeavingDate);
                    $("#Conduct").val(data.Conduct);
                    $("#StuTCApplyDate").val(data.StuTCApplyDate);
                    $("#TCIssueDate").val(data.TCIssueDate);
                    //$("#CourseOfStudy").val(data.CourseOfStudy);
                    $("#dvCertificate").val(data.CertificateId);
                    $("#DateToWords").val(data.DateToWords);
                    $("#AcademicYears").val(data.AcademicYears);
                    $("#ClassesStudied").val(data.ClassesStudied);
                    $("#FirstLanguage").val(data.FirstLanguage);
                }
                    
            },error:function(error)
            {
                alert(error);
            }
        });
    } 

    $("#StuName").on("change", function ()
    {
        FetchStudentForTC();
    });

    
    // Save Or Update ...
     $("#btnTCIssue").on("click", function ()
     {
         var isValid = true;
         if ($('#TransferCertificate').parsley().validate() !== true) isValid = false;
         if (!isValid) {    
             //gritter-info,danger,success,warning,default
             myAlert('Something went wrong ! Please check your inputs !', 'gritter-warning', '');
             return false;
         }
         var CertificateId = $("#dvCertificate").val();         
         var StuName = $("#StuName").val();
         var StudentName = $("#StudentName").val();
         var ParentName = $("#ParentName").val();
         var SerialNo = '';
         SerialNo = $("#SerialNo").val();
         var AdmissionNo = '';
         AdmissionNo = $("#AdmissionNo").val();
         var Guardian = $("#Guardian").val();
         var Nationality = $("#Nationality option:selected").text();
         var NationalityId = $("#Nationality").val();
         var Religion = $("#Religion option:selected").text();
         var ReligionId = $("#Religion").val();
         var Caste = $("#Caste").val();
         var Community = $("#Community option:selected").text();
         var CommunityId = $("#Community").val();
         var Sex = $("#Sex option:selected").text();
         var SexId = $("#Sex").val();
         var DateOfBirth = $("#DateOfBirth").val();
         var IdentificationMark1 = $("#IdentificationMark1").val();
         var IdentificationMark2 = $("#IdentificationMark2").val();
         var AdmissionDate = $("#AdmissionDate").val();
         var AdmittedClass = $("#AdmittedClass").val();
         var LeavingTime = $("#LeavingTime").val();
         var MainCourse = $("#MainCourse").val();
         var AlliedCourse = $("#AlliedCourse").val();
         var FeesPaid = $("#FeesPaid").val();
         var StuScholarship = $("#StuScholarship").val();
         var LeavingDate = $("#LeavingDate").val();
         var Conduct = $("#Conduct").val();
         var StuTCApplyDate = $("#StuTCApplyDate").val();
         var TCIssueDate = $("#TCIssueDate").val();
         var CourseOfStudy = $("#CourseOfStudy").val();
         var AcademicYears = $("#AcademicYears").val();
         var ClassesStudied = $("#ClassesStudied").val();
         var FirstLanguage = $("#FirstLanguage").val();
         var ClassId = $("#ClassName").val();
         var DatetoWords = $("#DateToWords").val();
        // var AlliedCourse2 =  $("#AlliedCourse2").val();
         var JsonData;
         if (JsonData == null)
         {
             JsonData = '{"CertificateId":"' + CertificateId + '","DatetoWords":"' + DatetoWords + '","AcademicYears":"' + AcademicYears + '","ClassesStudied":"' + ClassesStudied + '","FirstLanguage":"' + FirstLanguage + '","ClassId":"' + ClassId + '","SexId":"' + SexId + '","CommunityId":"' + CommunityId + '","ReligionId":"' + ReligionId + '","NationalityId":"' + NationalityId + '","StudentId":"' + StuName + '","StudentName":"' + StudentName + '","ParentName":"' + ParentName + '","SerialNo":"' + SerialNo + '","AdmissionNo":"' + AdmissionNo + '","Guardian":"' + Guardian + '","Nationality":"' + Nationality + '","Religion":"' + Religion + '","Caste":"' + Caste + '","Community":"' + Community + '","Sex":"' + Sex + '","DateOfBirth":"' + DateOfBirth + '","IdentificationMark1":"' + IdentificationMark1 + '","IdentificationMark2":"' + IdentificationMark2 + '","AdmissionDate":"' + AdmissionDate + '","AdmittedClass":"' + AdmittedClass + '","LeavingTime":"' + LeavingTime + '","MainCourse":"' + MainCourse + '","AlliedCourse":"' + AlliedCourse + '","FeesPaid":"' + FeesPaid + '","StuScholarship":"' + StuScholarship + '","LeavingDate":"' + LeavingDate + '","Conduct":"' + Conduct + '","StuTCApplyDate":"' + StuTCApplyDate + '","TCIssueDate":"' + TCIssueDate + '","CourseOfStudy":"' + CourseOfStudy + '"}';
         }
         //alert(Guardian);
         //alert(JsonData);
         $.ajax({
             url:"@Url.Action("InsertTransferCertificate", "Student")",
             method: "POST",
             datatype: "json",
             data: {JsonTCIssue:JsonData},
             success:function(data)
             {
                 //$("#dvCertificate").val(data.CertificateId);
                 alert(data.sResult);
                 $("#btnTCIssue").val("Submit");
                 $('#btnPrint').removeClass('disabled');
                 $('#btnTCIssueEdit').removeClass('disabled');
                 FetchStudentForTC();
                // window.location.reload();
             },error:function(error)
             {
                 alert(error);
             }
         });
     });
    </script>  

}



