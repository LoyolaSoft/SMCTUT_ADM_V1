@model CMS.ViewModel.ViewModel.TaskManagementViewModel

@{
    ViewBag.Title = "EditAssignment";
    Layout = "~/Views/Shared/_AdminLayoutPage.cshtml";
}

@section styles{
    <link href="~/Content/assets/plugins/bootstrap-select/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/Content/assets/css/style.min.css" rel="stylesheet" />
    <link href="~/Content/assets/plugins/summernote/summernote.css" rel="stylesheet" />
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content" id="content">
        <ol class="breadcrumb pull-right">
            <li><a href="javascript:;">Home</a></li>
            <li><a href="@Url.Action("ListAssignment","TaskManagement")">List Assignment </a></li>
            <li class="active">Add Assignment </li>
        </ol>
        <h1 class="page-header">Assignment</h1>
        <div class="panel">
            <div class="panel-heading bg-primary">
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
                </div>
                <h4 class="panel-title">Add Assignment</h4>
            </div>
            <div class="panel-body">
                <div class="form-horizontal">
                    <div class="col-md-12">
                        <div class="col-md-6 col-md-offset-3">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model=>model.HiddenId)
                            @Html.HiddenFor(model=>model.ClassId)
                            @Html.HiddenFor(model => model.CourseId)
                            @Html.HiddenFor(model=>model.Assignment.ASSIGNMENT_ID)
                            @Html.HiddenFor(model=>model.Assignment.IS_ACTIVE)
                            @Html.HiddenFor(model=>model.Assignment.IS_FILE_UPLOAD)
                            <div class="form-group">
                                @Html.LabelFor(model => model.ClassList, "Class List", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.ClassList, (Model.ClassList != null) ? Model.ClassList : Enumerable.Empty<SelectListItem>(), "-- Select --", new { @class = " selectpicker show-menu-arrow show-tick drop-down form-control  input-sm", @data_live_search = "true" })
                                    @Html.ValidationMessageFor(model => model.ClassList, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.CourseList, "Course List", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.CourseList, (Model.CourseList != null) ? Model.CourseList : Enumerable.Empty<SelectListItem>(), "-- Select --", new { @class = " selectpicker show-menu-arrow show-tick drop-down form-control  input-sm", @data_live_search = "true" })
                                    @Html.ValidationMessageFor(model => model.CourseList, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Assignment.ASSIGNMENT_TITLE, "Assignment Title", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.Assignment.ASSIGNMENT_TITLE, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter Assignment Title" } })
                                    @Html.ValidationMessageFor(model => model.Assignment.ASSIGNMENT_TITLE, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Assignment.SUBMISSION_DATE, "Submission Date", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    <div class="input-group date" id="datetimepicker1">
                                        @Html.EditorFor(model => model.Assignment.SUBMISSION_DATE, new { htmlAttributes = new { @class = "form-control", id = "SubmissionDate", placeholder = "Pick Submission Date" } })
                                        @Html.ValidationMessageFor(model => model.Assignment.SUBMISSION_DATE, "", new { @class = "text-danger" })
                                        <span class="input-group-addon bg-purple"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Is Active", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.CheckBox("IS_ACTIVE", Model.IS_ACTIVE, new { @class = "input-sm" })

                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Is File Upload", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.CheckBox("IS_FILE_UPLOAD", Model.IS_FILE_UPLOAD, new { @class = "input-sm" })

                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Assignment.DESCRIPTION, "Description", htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="panel table-bordered panel-inverse m-b-0 col-md-9">
                                    <div class="panel-body p-0 table-bordered">
                                        <form action="" method="POST" name="summernote_form" class="table-bordered" style="height:5px">
                                            <textarea class="summernote table-bordered" name="content" id="txtDescription"></textarea>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group pull-right ">
                                <div class="col-md-12">
                                    <a id="btnSubmit" value="SUBMIT" class="btn btn-primary">Submit</a>
                                    <a id="" href="@Url.Action("ListAssignment", "TaskManagement")" value="" class="btn btn-danger">Cancel</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}@section scripts{
    <script src="~/Content/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="~/Content/assets/plugins/summernote/summernote.min.js"></script>
    <script src="~/Content/assets/plugins/bootstrap-select/bootstrap-select.min.js"></script>
    <script>
        $('.selectpicker').selectpicker({
            size: 4
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#ClassList').val($('#ClassId').val());
            $('#CourseList').val($('#CourseId').val());
            $('.selectpicker').selectpicker('refresh');
            var Code= $('#HiddenId').val();
            $(".summernote").summernote('code', Code);
            if ($("#Assignment_IS_ACTIVE").val() == 1)
                $("#IS_ACTIVE").prop("checked", true);
            else 
                $("#IS_ACTIVE").prop("checked", false);
            if ($("#Assignment_IS_FILE_UPLOAD").val() == 1)
                $("#IS_FILE_UPLOAD").prop("checked", true);
            else
                $("#IS_FILE_UPLOAD").prop("checked", false);

            handleSummernote = function () {
                $(".summernote").summernote({
                    placeholder: "Add a Description"
                })
            }
            handleSummernote();
            handleDatepicker = function () {
                "use strict";
                $("#SubmissionDate").datepicker({
                    todayHighlight: !0,
                    autoclose: !0,
                    startDate: new Date(),
                    format: "dd/mm/yyyy",
                    orientation: "right bottom",
                    zIndexOffset: '15',
                    defaultDate: new Date()
                    // 'top': top,
                    // 'left': left
                }
                )
            }
            handleDatepicker();
        });
    </script>
    <script>
        $('#ClassList').on('change', function () {
            var inp = $('#ClassList').val();
            $.ajax({
                url: "@Url.Action("GetCourseListByClassIdAndStaffId", "TaskManagement")",
                async: false,
                data: { sClassId: inp },
                success: function (option) {
                    var dvStudentFeeTransaction = $('#CourseList');
                    dvStudentFeeTransaction.empty();
                    dvStudentFeeTransaction.append(option.sResult).selectpicker('refresh');
                },
                error: function (xhr, textStatus, error) {
                    alert(error + "\n");
                }

            });
        });
        var validate = function () {
            var validate = 0;
            var ClassId = $('#ClassList').val();
            var CourseId = $('#CourseList').val();
            var Title = $('#Assignment_ASSIGNMENT_TITLE').val();
            var SubmissionDate = $('#SubmissionDate').val();
            if (ClassId == 0 && CourseId == 0 && Title != null && SubmissionDate != null) {
                validate = 1;
            }
            return validate;
        }
    </script>
    <script>
        $('#btnSubmit').on('click', function () {
            var JsonData;
            var str;
            var $log = $("#log");
            var Description = "";
            var html;
            Description = $('#txtDescription').summernote('code');
            //Description = Description.replace(/"/g, '\'');
            str = btoa(Description);
            //Description = Description.prop('innerHTML');
            //html = $.parseHTML(Description);
            //alert(html);
            //alert($log.append(html));
            var ClassId = $('#ClassList').val();
            var CourseId = $('#CourseList').val();
            var Title = $('#Assignment_ASSIGNMENT_TITLE').val();
            var AssignmentId = $('#Assignment_ASSIGNMENT_ID').val();
            var SubmissionDate = $('#SubmissionDate').val();
            var IsActive = $("#IS_ACTIVE").val();
            var IsFileUpload = $("#IS_FILE_UPLOAD").val();
            if ($('#IS_ACTIVE').is(":checked")) {
                IsActive = 1;
            }
            else {
                IsActive = 0;
            }
            if ($('#IS_FILE_UPLOAD').is(":checked")) {
                IsFileUpload = 1;
            }
            else {
                IsFileUpload = 0;
            }
            if (validate()) {
                alert('Please Enter Correct Values...!!!');
                return false;
            }
            JsonData = '{"ASSIGNMENT_ID":"' + AssignmentId + '","CLASS_ID":"' + ClassId + '","COURSE_ID":"' + CourseId + '","ASSIGNMENT_TITLE":"' + Title + '","SUBMISSION_DATE":"' + SubmissionDate + '","DESCRIPTION":"' + str + '","IS_ACTIVE":"' + IsActive + '","IS_FILE_UPLOAD":"'+IsFileUpload+'"}';
            if (JsonData != null) {
                $.ajax({
                    url: "@Url.Action("SaveAssignment", "TaskManagement")",
                    method: "POST",
                    data: { Assignment: JsonData },
                    success: function (objResult) {
                        alert(objResult.Message);
                    }, error: function (error) {
                        alert('Record not saved try again ..!');
                    }
                });
            }
        });
</script>
}